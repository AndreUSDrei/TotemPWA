@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@{
    var categorias = ViewBag.Categorias as List<TotemPWA.Models.Category>;
    var produtos = ViewBag.Produtos as List<TotemPWA.Models.Product>;
    var categoriaSelecionada = categorias?.FirstOrDefault();
    var produtosFiltrados = produtos?.Where(p => p.CategoryId == categoriaSelecionada?.Id).ToList() ?? new List<TotemPWA.Models.Product>();
    Func<string, string> ObterIconeCategoria = slug => slug switch
    {
        "combos" => "combos.png",
        "sobremesas" => "sobremesa.png",
        "molhos" => "molhos.png",
        "promocoes" => "cupom.png",
        "bebidas" => "bebidas.png",
        "extras" => "batata.png",
        "lanches" => "menuburguerimage.png",
        _ => "menuburguerimage.png"
    };
    var produtosJson = JsonConvert.SerializeObject(
        produtos.Select(p => new {
            p.Id,
            p.Name,
            p.Price,
            p.Image,
            p.CategoryId,
            p.Category?.Slug
        })
    );
    var categoriasJson = JsonConvert.SerializeObject(
        categorias.Select(c => new {
            c.Id,
            c.Name,
            c.Slug,
            c.Icon
        })
    );
    // Filtros por categoria
    var filtrosPorCategoria = new Dictionary<string, List<string>>
    {
        { "lanches", new List<string> { "Todos", "Vegano", "Carne", "Frango" } },
        { "combos", new List<string>() },
        { "bebidas", new List<string> { "Todos", "Refrigerantes", "Sucos", "Águas" } },
        { "extras", new List<string> { "Todos", "Batatas", "Nuggets" } },
        { "molhos", new List<string> { "Todos", "Tradicionais", "Especiais", "Picantes" } },
        { "sobremesas", new List<string> { "Todos", "Sorvetes", "Milk Shakes", "Doces" } },
    };
    var slugSelecionado = categoriaSelecionada?.Slug ?? "lanches";
    var filtrosAtuais = filtrosPorCategoria.ContainsKey(slugSelecionado) ? filtrosPorCategoria[slugSelecionado] : new List<string>();
}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pedidos</title>
    <link rel="stylesheet" href="~/css/tela2.css" asp-append-version="true">
    <link href="https://fonts.googleapis.com/css2?family=Tilt+Warp&display=swap" rel="stylesheet">
</head>
<body>
    <div class="main">
        <!-- Banner -->
        <div class="banner">
            <img src="~/img/banner.jpg" asp-append-version="true" alt="Banner" />
        </div>
        <div class="c1">
            <!-- Menu lateral -->
            <div class="menu">
                @foreach (var cat in categorias)
                {
                    <div class="menu-item @(cat.Id == categoriaSelecionada?.Id ? "active" : "")" onclick="trocarCategoria('@cat.Slug', @cat.Id)">
                        <img class="img-menu-item" src="/img/@(cat.Icon ?? ObterIconeCategoria(cat.Slug))" alt="@cat.Name" />
                        <div>@cat.Name</div>
                    </div>
                }
            </div>
            <!-- Conteúdo principal -->
            <div class="content">
                @if (filtrosAtuais.Count > 0)
                {
                <div class="container-categoria">
                    <div class="nav-categorias" id="navCategorias">
                        @for (int i = 0; i < filtrosAtuais.Count; i++)
                        {
                            <a href="#" class="@(i == 0 ? "active" : "")" onclick="filtrarPorFiltro('@filtrosAtuais[i]'); return false;">@filtrosAtuais[i]</a>
                        }
                    </div>
                </div>
                }
                <div class="pedido">
                    <div class="pedido-grid" id="productsGrid">
                        @foreach (var produto in produtosFiltrados)
                        {
                            <div class="pedido-item" data-id="@produto.Id" data-categoria="@produto.CategoryId" onclick="abrirModalEditar(this)">
                                <img class="pedido-imagem" src="/@produto.Image" alt="@produto.Name" />
                                <h3 class="pedido-titulo">@produto.Name</h3>
                                <h4 class="pedido-preco">R$ @produto.Price.ToString("N2")</h4>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Barra inferior -->
        <div class="barra-inferior">
            <div class="total">
                <span>Total:</span>
            </div>
            <div class="preco">
                <span id="cartTotal">R$ 0,00</span>
            </div>
            <div class="ConteinerBtn">
                <div class="NavBtn">
                    <a id="cancelar" href="/">Cancelar</a>
                    <a id="botaoCarrinho" href="#"><img src="/img/carrinhocom.png"></a>
                    <a id="prosseguir" href="TelaPagamento">Finalizar</a>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Dados serializados
        var produtos = @Html.Raw(produtosJson);
        var categorias = @Html.Raw(categoriasJson);
        var filtrosPorCategoria = {
            lanches: ["Todos", "Vegano", "Carne", "Frango"],
            combos: [],
            bebidas: ["Todos", "Refrigerantes", "Sucos", "Águas"],
            extras: ["Todos", "Batatas", "Nuggets"],
            molhos: ["Todos", "Tradicionais", "Especiais", "Picantes"],
            sobremesas: ["Todos", "Sorvetes", "Milk Shakes", "Doces"]
        };
        var categoriaAtual = '@slugSelecionado';
        var categoriaIdAtual = @categoriaSelecionada?.Id ?? 0;
        // Troca de categoria (menu lateral)
        function trocarCategoria(slug, id) {
            categoriaAtual = slug;
            categoriaIdAtual = id;
            // Atualiza filtros
            var nav = document.getElementById('navCategorias');
            if (nav) {
                nav.innerHTML = '';
                (filtrosPorCategoria[slug] || []).forEach(function(filtro, idx) {
                    nav.innerHTML += `<a href="#" class="${idx === 0 ? 'active' : ''}" onclick="filtrarPorFiltro('${filtro}'); return false;">${filtro}</a>`;
                });
            }
            // Atualiza produtos
            filtrarPorFiltro((filtrosPorCategoria[slug] || [])[0] || null);
            // Atualiza menu lateral
            document.querySelectorAll('.menu-item').forEach(item => item.classList.remove('active'));
            var menuItems = document.querySelectorAll('.menu-item');
            if (menuItems && menuItems[id-1]) menuItems[id-1].classList.add('active');
        }
        // Filtro por filtro específico
        function filtrarPorFiltro(filtro) {
            var grid = document.getElementById('productsGrid');
            grid.innerHTML = '';
            var filtrados = produtos.filter(p => p.CategoryId === categoriaIdAtual);
            // Filtros específicos por categoria
            if (categoriaAtual === 'lanches') {
                if (filtro === 'Vegano') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('veg'));
                else if (filtro === 'Carne') filtrados = filtrados.filter(p => !p.Name.toLowerCase().includes('veg') && !p.Name.toLowerCase().includes('frango'));
                else if (filtro === 'Frango') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('frango'));
            } else if (categoriaAtual === 'bebidas') {
                if (filtro === 'Refrigerantes') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('coca') || p.Name.toLowerCase().includes('fanta') || p.Name.toLowerCase().includes('sprite'));
                else if (filtro === 'Sucos') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('suco'));
                else if (filtro === 'Águas') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('água'));
            } else if (categoriaAtual === 'extras') {
                if (filtro === 'Batatas') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('batata'));
                else if (filtro === 'Nuggets') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('nugget'));
            } else if (categoriaAtual === 'molhos') {
                if (filtro === 'Tradicionais') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('ketchup') || p.Name.toLowerCase().includes('maionese') || p.Name.toLowerCase().includes('barbecue') || p.Name.toLowerCase().includes('verde') || p.Name.toLowerCase().includes('rose'));
                else if (filtro === 'Especiais') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('queijo') || p.Name.toLowerCase().includes('mostarda'));
                else if (filtro === 'Picantes') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('pimenta'));
            } else if (categoriaAtual === 'sobremesas') {
                if (filtro === 'Sorvetes') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('sorvete'));
                else if (filtro === 'Milk Shakes') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('milk'));
                else if (filtro === 'Doces') filtrados = filtrados.filter(p => p.Name.toLowerCase().includes('brownie') || p.Name.toLowerCase().includes('waffle') || p.Name.toLowerCase().includes('petit'));
            }
            filtrados.forEach(produto => {
                grid.innerHTML += `
                <div class=\"pedido-item\" data-id=\"${produto.Id}\" data-categoria=\"${produto.CategoryId}\" onclick=\"abrirModalEditar(this)\">
                    <img class=\"pedido-imagem\" src=\"/${produto.Image}\" alt=\"${produto.Name}\" />
                    <h3 class=\"pedido-titulo\">${produto.Name}</h3>
                    <h4 class=\"pedido-preco\">R$ ${produto.Price.toFixed(2).replace('.', ',')}</h4>
                </div>`;
            });
            // Atualiza filtro ativo
            document.querySelectorAll('.nav-categorias a').forEach(btn => btn.classList.remove('active'));
            var btn = Array.from(document.querySelectorAll('.nav-categorias a')).find(b => b.textContent.trim() === filtro);
            if (btn) btn.classList.add('active');
        }
        // Inicialização: seleciona a categoria inicial
        window.onload = function() {
            trocarCategoria(categoriaAtual, categoriaIdAtual);
            // Remover qualquer texto ou overlay de carregando
            document.querySelectorAll('.pedido-item').forEach(function(item) {
                if (item.textContent.includes('Carregando')) {
                    item.remove();
                }
            });
            var loading = document.querySelector('.loading');
            if (loading) loading.remove();
            // Também remove qualquer texto "Carregando..." solto
            document.querySelectorAll('*').forEach(function(el) {
                if (el && el.innerText && el.innerText.trim() === 'Carregando...') el.remove();
            });
        };
        // Corrigir modais: abrir o modal real
        window.abrirModalEditar = function(el) {
            var modal = document.querySelector('.modal-editar');
            if (!modal) return;
            // Preencher dados do produto
            var nome = el.querySelector('.pedido-titulo').innerText;
            var preco = el.querySelector('.pedido-preco').innerText;
            var imagem = el.querySelector('.pedido-imagem').getAttribute('src');
            modal.querySelector('.modal-editar-titulo').innerText = nome;
            modal.querySelector('.modal-editar-preco').innerText = preco;
            modal.querySelector('.modal-editar-imagem').setAttribute('src', imagem);
            // Exibir modal
            modal.style.display = 'flex';
            // Fechar modal ao clicar no X
            var fechar = modal.querySelector('.fechar-modal-editar');
            if (fechar) fechar.onclick = function() { modal.style.display = 'none'; };
        }
    </script>
</body>
</html>